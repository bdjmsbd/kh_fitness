<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.kh.fitness.dao.ClientDAO">

	<select id="selectMember" resultType="MemberVO">
		select * from member where me_id = #{me_id}
	</select>

	<select id="selectReviewPostList" resultType="ReviewPostVO">
		select
			* 
		from 
			review_post 
		join 
			payment on rp_pa_num = pa_num
	</select>
	
	<update id="updateReviewPostView">
		update review_post set rp_view = rp_view + 1 where rp_num = #{rp_num}
	</update>
	
	<select id="selectReviewPost" resultType="ReviewPostVO">
		select * from review_post join payment on rp_pa_num = pa_num where rp_num = #{rp_num}
	</select>
	
	<select id="checkMemberPayment" resultType="PaymentVO">
		select * from payment join payment_type on pa_pt_num = pt_num where pa_me_id = #{me_id} and pa_review = 'N'
	</select>
	
	<select id="selectBranchList" resultType="BranchVO">
		select * from branch
	</select>
	
	<insert id="insertReviewPost">
		insert into review_post(rp_title, rp_content, rp_br_name, rp_pa_num)
		values(#{rp_title}, #{rp_content}, #{rp_br_name}, #{rp_pa_num})
	</insert>
	
	<update id="updatePaymentReview">
		update payment set pa_review = 'Y' where pa_num = #{pa_num}
	</update>
	
	<update id="updateReviewPost">
		update 
			review_post 
		set
			rp_title = #{rp_title},
			rp_content = #{rp_content},
			rp_br_name = #{rp_br_name}
		where
			rp_num = #{rp_num}
	</update>
	
	<delete id="deleteReviewPost">
		delete from review_post where rp_num = #{rp_num}
	</delete>

	<select id="selectFaqList" resultType="MemberInquiryVO">
		select 
			* 
		from 
			member_inquiry 
		where 
			mi_state = 'FAQ'
			<if test="ca != 'all'">
				and mi_it_name = #{ca}
			</if>
			<choose>
				<when test="cri.type == 'title'">
					and mi_title like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'content'">
					and mi_content like concat('%', #{cri.search},'%')
				</when>
				<otherwise>
					and (mi_title like concat('%', #{cri.search},'%') or mi_content like concat('%', #{cri.search},'%'))
				</otherwise>
			</choose>
		order by 
			mi_it_name
		limit
			#{cri.pageStart}, #{cri.perPageNum}	
	</select>
	
	<select id="selectFaqTotalCount" resultType="int">
		select 
			count(*)
		from 
			member_inquiry 
		where 
			mi_state = 'FAQ'
			<if test="ca != 'all'">
				and mi_it_name = #{ca}
			</if>
			<choose>
				<when test="cri.type == 'title'">
					and mi_title like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'content'">
					and mi_content like concat('%', #{cri.search},'%')
				</when>
				<otherwise>
					and (mi_title like concat('%', #{cri.search},'%') or mi_content like concat('%', #{cri.search},'%'))
				</otherwise>
			</choose>		
	</select>
	
	<select id="selectInquiryTypeList" resultType="InquiryTypeVO">
		select * from inquiry_type
	</select>
	
	<insert id="insertInquiry">
		insert into member_inquiry(mi_title, mi_content, mi_email, mi_br_name, mi_it_name)
		values(#{mi_title}, #{mi_content}, #{mi_email}, #{mi_br_name}, #{mi_it_name})
	</insert>
	
	<select id="selectReservationList" resultType="BranchProgramScheduleVO">
		select
			*  
		from 
			branch_program_schedule
		join
			branch_program on bp_num = bs_bp_num
		join
			employee on bp_em_num = em_num
		join
			program_reservation on pr_bs_num = bs_num
		where
			pr_me_id = #{me_id}
			<if test="view == 'present'">
				and bs_start > now()
			</if>
			<if test="view == 'past'">
				and now() > bs_end
			</if>
			<choose>
				<when test="cri.type == 'branch'">
					and bp_br_name like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'program'">
					and bp_sp_name like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'trainer'">
					and em_name like concat('%', #{cri.search},'%')
				</when>
			</choose>	
		<if test="view == 'present'">
			order by
				bs_start
		</if>
		<if test="view == 'past'">
			order by
				bs_end desc
		</if>						
		limit
			#{cri.pageStart}, #{cri.perPageNum}			
	</select>
	
	<select id="selectScheduleTotalCount" resultType="int">
		select
			count(*)
		from 
			branch_program_schedule
		join
			branch_program on bp_num = bs_bp_num
		join
			employee on bp_em_num = em_num
		join
			program_reservation on pr_bs_num = bs_num
		where
			pr_me_id = #{me_id}
			<if test="view == 'present'">
				and bs_start > now()
			</if>
			<if test="view == 'past'">
				and now() > bs_end
			</if>
			<choose>
				<when test="cri.type == 'branch'">
					and bp_br_name like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'program'">
					and bp_sp_name like concat('%', #{cri.search},'%')
				</when>
				<when test="cri.type == 'trainer'">
					and em_name like concat('%', #{cri.search},'%')
				</when>
			</choose>	
	</select>
	
	<select id="selectReservation" resultType="ProgramReservationVO">
		select * from program_reservation where pr_num = #{pr_num}
	</select>
	
	<delete id="deleteReservation">
		delete from program_reservation where pr_num = #{pr_num}
	</delete>
	
	<update id="updateScheduleCurrent">
		update
			branch_program_schedule
		set
			bs_current = bs_current - 1
		where
			bs_num = #{bs_num} 
	</update>
	
	<select id="selectPaymentList" resultType="PaymentVO">
		select 
			* 
		from 
			payment 
		join 
			payment_type on pt_num = pa_pt_num
		where
			pa_me_id = #{me_id}
		order by
			pa_date desc
		limit
			#{cri.pageStart}, #{cri.perPageNum}		
	</select>
	
	<select id="selectPaymentTotalCount" resultType="int">
		select 
			count(*) 
		from 
			payment 
		join 
			payment_type on pt_num = pa_pt_num
		where
			pa_me_id = #{me_id}
	</select>
	
	<select id="selectCurrentMembership" resultType="MembershipDTO">
		select 
			min(pa_start) as pa_start, max(pa_end) as pa_end 
		from 
			payment 
		join 
			payment_type on pa_pt_num = pt_num 
		where 
			pa_me_id = #{me_id} and
			pa_end >= now() and
			pt_type = '이용권' and
			pa_state = '결제완료'
	</select>
	
	<select id="selectCurrentPT" resultType="MembershipDTO">
		select 
			pa_start, pa_end, pt_count as total_count
		from 
			payment 
		join 
			payment_type on pa_pt_num = pt_num 
		where 
			pa_me_id = #{me_id} and
			now() >= pa_start and
			pa_end >= now() and
			pt_type = 'PT' and
			pa_state = '결제완료'
	</select>
	
	<select id="selectScheduledPT" resultType="int">
		select 
			count(*) 
		from 
			program_reservation 
		join 
			branch_program_schedule on pr_bs_num = bs_num
		join 
			branch_program on bs_bp_num = bp_num
		join 
			sports_program on bp_sp_name = sp_name
		where
			pr_me_id = #{me_id} and
			bs_start >= #{pa_start} and
			#{pa_end} >= bs_end and
			sp_type = '단일'
	</select>
	
	<select id="selectPayment" resultType="PaymentVO">
		select * from payment where pa_num = #{pa_num}
	</select>
	
	<select id="selectRefund" resultType="RefundVO">
		select * from refund where re_pa_num = #{pa_num}
	</select>
	
	<select id="selectInquiryList" resultType="MemberInquiryVO">
		select
			* 
		from 
			member_inquiry 
		where 
			mi_email = #{me_email}
	</select>
	
	<select id="selectInquiry" resultType="MemberInquiryVO">
		select * from member_inquiry where mi_num = #{mi_num}
	</select>
	
	<select id="isEmailDuplicate" resultType="int">
		select count(*) from member where me_email = #{email}
	</select>
	
	<update id="updateMemberInfo">
		update
			member
		set
			me_email = #{me_email},
			me_name = #{me_name},
			me_phone = #{me_phone},
			me_postcode = #{me_postcode},
			me_address = #{me_address},
			me_detailAddress = #{me_detailAddress},
			me_extraAddress = #{me_extraAddress},
			me_birth = #{me_birth},
			me_gender = #{me_gender}
		where
			me_id = #{me_id}
	</update>
	
	<update id="updateMemberPw">
		update member set me_pw = #{me_pw} where me_id = #{me_id}
	</update>
	
	<update id="updateMemberStatusToRemoved">
		update 
			member 
		set 
			me_authority = 'REMOVED',
			me_dataPeriod = DATE_ADD(NOW(), INTERVAL 6 MONTH)
		where
			me_id = #{me_id}
	</update>
	
	<select id="selectSocialId" resultType="String">
		select 
		<if test="social_type == 'KAKAO' || social_type == 'kakao'">
        	me_kakaoUserId
	    </if>
	    <if test="social_type == 'NAVER' || social_type == 'naver'">
	        me_naverUserId
	    </if>
		from member 
		where me_id = #{me_id}
	</select>
	
	<select id="selectMemberFromSocial" resultType="MemberVO">
		select * from member 
		where me_id = #{user.me_id} 
		<if test="social_type == 'KAKAO' || social_type == 'kakao'">
        	and me_kakaoUserId = #{user.me_kakaoUserId}
	    </if>
	    <if test="social_type == 'NAVER' || social_type == 'naver'">
	        and me_naverUserId = #{user.me_naverUserId}
	    </if>
	</select>
	
	<update id="updateSocialIdSetNull">
		update member
		set
		<if test="social_type == 'KAKAO' || social_type == 'kakao'">
        	me_kakaoUserId = null
	    </if>
	    <if test="social_type == 'NAVER' || social_type == 'naver'">
	        me_naverUserId = null
	    </if>
	    where me_id = #{user.me_id}
	</update>
	
	<select id="selectMypageReviewPostList" resultType="ReviewPostVO">
		select
			* 
		from 
			review_post 
		join 
			payment on rp_pa_num = pa_num
		where
			pa_me_id = #{me_id}			
	</select>
	
</mapper>